on:
  workflow_call:
    inputs:
      preset:
        description: >
          Any preset to specify when running dart test, see the 'test' packages
          documentation on presets for more information.
        type: string

      test-args:
        description: Arguments passed directly to the dart test command
        type: string

      package-path:
        description: A path to the package to run unit tests against
        type: string
        default: '.'

      timeout:
        description: A timeout, specificed in minutes, for the dart test command
        default: 15
        type: number

      sdk:
        description: See https://github.com/Workiva/gha-dart/blob/master/setup-dart/README.md
        default: 2.19.6
        type: string

jobs:
  pre:
    runs-on: ubuntu-latest
    outputs:
      chrome-platform: ${{ steps.analyze-dart-test.outputs.chrome-platform }}
      dart-dev: ${{ steps.analyze-pubspec.outputs.dart-dev }}
      build-runner: ${{ steps.analyze-pubspec.outputs.build-runner }}
      build-test: ${{ steps.analyze-pubspec.outputs.build-test }}
    steps:
      - uses: actions/checkout@v4
      - name: Analyze dart_test.yaml
        working-directory: ${{ inputs.package-path }}
        id: analyze-dart-test
        run: |
          if [[ -f 'dart_test.yaml' ]]; then
              platforms=$(yq '.platforms[], .presets.*.platforms[]' dart_test.yaml)

              if [[ "$platforms" == *"chrome"* ]]; then
                echo "Project has chrome platform config"
                echo "chrome-platform=true" >> $GITHUB_OUTPUT
                exit 0
              fi
          fi
          echo "Project does not have chrome platform config"
          echo "chrome-platform=false" >> $GITHUB_OUTPUT
      - name: Analyze pubspec.yaml
        working-directory: ${{ inputs.package-path }}
        id: analyze-pubspec
        run: |
          echo "dart-dev=$(grep -q "^  dart_dev:" pubspec.yaml && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "build-runner=$(grep -q "^  build_runner:" pubspec.yaml && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "build-test=$(grep -q "^  build_test:" pubspec.yaml && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Print outputs
        run: |
          echo "chrome-platform: ${{ steps.analyze-dart-test.outputs.chrome-platform }}"
          echo "dart-dev: ${{ steps.analyze-pubspec.outputs.dart-dev }}"
          echo "build-runner: ${{ steps.analyze-pubspec.outputs.build-runner }}"
          echo "build-test: ${{ steps.analyze-pubspec.outputs.build-test }}"

  unit:
    runs-on: ubuntu-latest
    needs: pre
    name: ${{ matrix.release-mode && 'release' || 'dev' }}
    strategy:
      fail-fast: false
      matrix:
        release-mode: ${{ fromJson(needs.pre.outputs.chrome-platform == 'true' && '[true, false]' || '[false]') }}
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.sdk }}

      - name: Setup Chrome
        if: needs.pre.outputs.chrome-platform == 'true'
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Setup Chrome Alias
        if: needs.pre.outputs.chrome-platform == 'true'
        run: alias google-chrome="/opt/hostedtoolcache/chromium/stable/x64/chrome"

      - name: Pub get
        working-directory: ${{ inputs.package-path }}
        run: dart pub get

      - name: Run tests with dart_dev
        working-directory: ${{ inputs.package-path }}
        if: needs.pre.outputs.dart-dev == 'true'
        run: |
          args=()
          if [[ "${{ matrix.release-mode }}" == "true" ]]; then
            args+=(--release)
          fi

          if [[ "${{ inputs.preset }}" != "" ]]; then
            args+=(-P ${{ inputs.preset }})
          fi

          if [[ "${{ inputs.test-args }}" != "" ]]; then
            args+=(--test-args="${{ inputs.test-args }}")
          fi

          echo "timeout ${{ inputs.timeout }}m dart run dart_dev test "${args[@]}""
          timeout ${{ inputs.timeout }}m dart run dart_dev test "${args[@]}"

      - name: Run tests with build_runner
        working-directory: ${{ inputs.package-path }}
        if: needs.pre.outputs.dart-dev == 'false' && needs.pre.outputs.build-runner == 'true' && needs.pre.outputs.build-test == 'true'
        run: |
          args=()
          if [[ "${{ matrix.release-mode }}" == "true" ]]; then
            args+=(--release)
          fi

          if [[ "${{ inputs.preset }}" != "" ]]; then
            args+=(-P ${{ inputs.preset }})
          fi

          if [[ "${{ inputs.test-args }}" != "" ]]; then
            args+=(-- "${{ inputs.test-args }}")
          fi

          echo "timeout ${{ inputs.timeout }}m dart run build_runner test "${args[@]}""
          timeout ${{ inputs.timeout }}m dart run build_runner test "${args[@]}"

      - name: Run tests with dart test
        working-directory: ${{ inputs.package-path }}
        if: needs.pre.outputs.dart-dev == 'false' && needs.pre.outputs.build-runner == 'false' && needs.pre.outputs.build-test == 'false'
        run: |
          args=()
          if [[ "${{ matrix.release-mode }}" == "true" ]]; then
            echo "::error:: release-mode is only supported with dart_dev or build_runner"
            exit 1
          fi

          if [[ "${{ inputs.preset }}" != "" ]]; then
            args+=(-P ${{ inputs.preset }})
          fi

          if [[ "${{ inputs.test-args }}" != "" ]]; then
            args+=("${{ inputs.test-args }}")
          fi

          echo "timeout ${{ inputs.timeout }}m dart test "${args[@]}""
          timeout ${{ inputs.timeout }}m dart test "${args[@]}"