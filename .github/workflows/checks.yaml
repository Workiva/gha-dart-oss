on:
  workflow_call:
    inputs:
      package-path:
        description: The path to the package to run checks on
        default: '.'
        type: string

      additional-checks:
        description: >
          Any commands to run along with the hardcoded defaults. Enter multiple
          commands on different lines. Failure conditions are based on if any
          provided command results in a non-zero exit code, OR modifies the source.
        type: string

      sdk:
        description: See https://github.com/dart-lang/setup-dart
        default: 2.19.6
        type: string

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.sdk }}

      - working-directory: ${{ inputs.package-path }}
        run: dart pub get

      - working-directory: ${{ inputs.package-path }}
        run: |
          if (grep -q "^  dart_dev:" pubspec.yaml); then
            dart run dart_dev analyze
          else
            dart analyze .
          fi

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.sdk }}
      - name: Run format
        working-directory: ${{ inputs.package-path }}
        run: |
          if (grep -q "^  dart_dev:" pubspec.yaml); then
            dart run dart_dev format --check
          else
            dart format --output=none --set-exit-if-changed .
          fi

  dependency-validator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.sdk }}

      - name: Install Dependency Validator
        run: dart pub global activate dependency_validator ^4.1.0

      - name: Install Package Dependencies
        working-directory: ${{ inputs.package-path }}
        run: dart pub get

      - name: Run Dependency Validator
        working-directory: ${{ inputs.package-path }}
        run: dart pub global run dependency_validator

  validate-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        id: setup-dart
        with:
          sdk: ${{ inputs.sdk }}
      - id: analyze-pubspec
        working-directory: ${{ inputs.package-path }}
        run: |
          PACKAGE_NAME=$(yq '.name' pubspec.yaml)
          PACKAGE_VERSION=$(yq '.version' pubspec.yaml)

          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "release_ref=release_${PACKAGE_NAME}_${PACKAGE_VERSION}" >> $GITHUB_OUTPUT

      # Only validate the publish for release pull requests, as determined by the branch name
      - name: Debug
        run: |
          echo "Dart Version: ${{ steps.setup-dart.outputs.dart-version }}"
          echo "Current Ref: ${{ github.head_ref }}"
          echo "Analyzed Release Ref: ${{ steps.analyze-pubspec.outputs.release_ref }}"

      # dart v2's `dart pub publish --dry-run` runs `dart analyze --fatal-infos`. This was updated in dart3
      # (see: https://github.com/dart-lang/pub/pull/3877). Because "infos" are not a valid failure condition
      # we need to emulate the behavior of `dart pub publish --dry-run` for dart v2.
      - name: Validate Publish (dart v2)
        if: startsWith(steps.setup-dart.outputs.dart-version, '2') && github.head_ref == steps.analyze-pubspec.outputs.release_ref
        run: |
          grep -q "# ${{ steps.analyze-pubspec.outputs.package_version }}" CHANGELOG.md || {
            echo "::error::CHANGELOG.md does not contain a section for version $PACKAGE_VERSION"
            exit 1
          }
      - name: Validate Publish (dart v3)
        if: startsWith(steps.setup-dart.outputs.dart-version, '3') && github.head_ref == steps.analyze-pubspec.outputs.release_ref
        run: dart pub publish --dry-run

  analyze-additional-checks:
    runs-on: ubuntu-latest
    if: inputs.additional-checks != ''
    outputs:
      checks: ${{ steps.analyze.outputs.checks }}
    steps:
      - name: Analyze Checks
        id: analyze
        run: |
          checks=$(cat <<-END
          ${{ inputs.additional-checks }}
          END)
          checks_json=$(echo "$checks" | jq -R . | jq -scM .)
          echo "checks=$checks_json" >> $GITHUB_OUTPUT

  additional-checks:
    runs-on: ubuntu-latest
    needs: analyze-additional-checks
    strategy:
      fail-fast: false
      matrix:
        check: ${{ fromJson(needs.analyze-additional-checks.outputs.checks) }}
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ inputs.sdk }}

      - name: Install Package Dependencies
        working-directory: ${{ inputs.package-path }}
        run: dart pub get

      - name: Run '${{ matrix.check }}'
        run: ${{ matrix.check }}
        working-directory: ${{ inputs.package-path }}

      - name: Check for source changes
        run: |
          git diff --quiet -- . ':(exclude)**pubspec.lock' || {
            echo "::error::The '${{ matrix.check }}' failed with source changes"
            git --no-pager diff -- . ':(exclude)**pubspec.lock'
            exit 1
          }


